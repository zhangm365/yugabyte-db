// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

syntax = "proto2";

package yb.master;

option java_package = "org.yb.master";

import "yb/cdc/cdc_consumer.proto";
import "yb/cdc/xcluster_producer.proto";
import "yb/common/common.proto";
import "yb/common/common_net.proto";
import "yb/common/common_types.proto";
import "yb/consensus/metadata.proto";
import "yb/master/master_types.proto";

// This represents one instance of a placement constraint for a table. It is
// used to dictate what is the minimum number of expected replicas in a certain
// cloud/region/zone combo.
message PlacementBlockPB {
  // The cloud, region and zone information for this placement block.
  optional CloudInfoPB cloud_info = 1;

  // The minimum number of replicas that should always be up in this placement.
  optional int32 min_num_replicas = 2;
}

// This keeps track of the set of PlacementBlockPBs defining the placement
// requirements for a certain table. This is used both in the on-disk storage
// in SysCatalog, as well as in the actual table creation calls and in the
// schema returned to client queries.
//
// This is tightly coupled with the overall num_replicas for a certain table,
// as we want to both be able to specify requirements, per placement block, but
// also for the overall RF factor of the table.
message PlacementInfoPB {
  optional int32 num_replicas = 1;
  repeated PlacementBlockPB placement_blocks = 2;
  optional bytes placement_uuid = 3;
}

// Higher level structure to keep track of all types of replicas configured. This will have, at a
// minimum, the information about the replicas that are supposed to be active members of the raft
// configs, but can also include extra information, such as read only replicas.
message ReplicationInfoPB {
  optional PlacementInfoPB live_replicas = 1;
  repeated PlacementInfoPB read_replicas = 2;
  repeated CloudInfoPB affinitized_leaders = 3;
  repeated CloudInfoListPB multi_affinitized_leaders = 4;
}

message BackfillJobPB {
  repeated IndexInfoPB indexes = 1;

  enum State {
    IN_PROGRESS = 0;
    FAILED = 1;
    SUCCESS = 2;
  }
  // Index's TableId -> State for each index.
  map<string, State> backfill_state = 2;

  // Number of rows processed for this backfill task (the same for all indexes)
  optional uint64 num_rows_processed = 4 [ default = 0 ];

  optional uint64 backfilling_timestamp = 3;
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tables entries.
message SysTablesEntryPB {
  enum State {
    UNKNOWN = 0;
    PREPARING = 1;
    RUNNING = 2;
    ALTERING = 3;
    DELETING = 4;
    DELETED = 5;
  }

  enum HideState {
    VISIBLE = 0;
    HIDING = 1;
    HIDDEN = 2;
  }

  // Table name
  required bytes name = 1;

  // Table type
  optional TableType table_type = 10 [ default = DEFAULT_TABLE_TYPE ];

  // The table namespace ID.
  optional bytes namespace_id = 11;
  // The table namespace name.
  optional bytes namespace_name = 30;

  // sequence-id for the table metadata.
  // Used on tablet-report to avoid sending "alter-table" notifications.
  required uint32 version = 2;

  // Newest table schema (every TS will eventually have it).
  required SchemaPB schema = 3;

  // Last table schema that is guaranteed to have reached every TS, though
  // not necessarily the newest schema.
  //
  // This is the schema provided to the user on client->GetSchema(tableName).
  optional SchemaPB fully_applied_schema = 4;

  // The table's partitioning schema.
  optional PartitionSchemaPB partition_schema = 9;

  // The table's partitions version. Incremented each time partitions change.
  optional uint32 partition_list_version = 28;

  // The next column ID to assign to newly added columns in this table.
  // This prevents column ID reuse.
  optional int32 next_column_id = 8;

  // Replication information for this tablet.
  optional ReplicationInfoPB replication_info = 5;

  // Debug state for the table.
  optional State state = 6 [ default = UNKNOWN ];
  optional bytes state_msg = 7;

  // TODO(neil) OLDER INDEXes will always have the deprecated fields. To remove the old format, we
  // first need to come up with a way to convert existing catalog content to new format.
  // Secondary indexes of the table.
  repeated IndexInfoPB indexes = 12;

  // For index table: [to be deprecated and replaced by "index_info"]
  optional bytes indexed_table_id = 13; // Indexed table id of this index.
  optional bool is_local_index = 14 [ default = false ];  // Whether this is a local index.
  optional bool is_unique_index = 15 [ default = false ]; // Whether this is a unique index.

  // For index table: information about this index.
  optional IndexInfoPB index_info = 22;

  // For Postgres:
  optional bool is_pg_shared_table = 16 [ default = false ]; // Is this a shared table?

  optional uint32 wal_retention_secs = 24;

  // True if the table is colocated (including tablegroups, excluding YSQL system tables).
  optional bool colocated = 25 [ default = false ];
  // If the table is colocated and is not the parent table of the colocated tablet,
  // contains the table id of the parent table.
  optional bytes parent_table_id = 40;

  // For materialized views:
  optional bytes matview_pg_table_id = 36; // The PG OID of a materialized view
  optional bool is_matview = 37 [ default = false ]; // True if the table is a materialized view.

  optional uint32 fully_applied_schema_version = 23;
  repeated IndexInfoPB fully_applied_indexes = 26;
  optional IndexInfoPB fully_applied_index_info = 27;

  // During an alter table, which involves no schema change but only updating
  // a permission, is it sometimes acceptable for a client's request (which is
  // prepared with the current schema) to be accepted by a tserver which is
  // still running the previous version.
  // This is typically set during alters that are caused due to index
  // permissions being changed, when the table is backfilled.
  optional bool updates_only_index_permissions = 31 [ default = false ];
  // Keeps track of in-progress backfill jobs.
  // As of Apr 2021, we only have at most one outstanding backfill job, but
  // this restriction may be removed later on. Hence repeated.
  repeated BackfillJobPB backfill_jobs = 32;

  optional HideState hide_state = 33;

  // Tablespace ID for use with transaction tables only. Normal YSQL tables do not set this field,
  // and tablespace information for such tables are instead fetched by scanning the pg catalog.
  optional bytes transaction_table_tablespace_id = 34;
  // Time when the table was hidden.
  optional fixed64 hide_hybrid_time = 35;

  message YsqlDdlTxnVerifierState {
    optional bool contains_create_table_op = 1;
    optional bool contains_alter_table_op = 2;
    optional bool contains_drop_table_op = 3;

    optional SchemaPB previous_schema = 4;
    optional string previous_table_name = 5;
  }

  // State that indicates that this table is being changed by a YSQL transaction.
  // This repeated field contains only a single element as of now. When we support DDL + Savepoints,
  // we will have one element for every savepoint modifying this table in this field.
  repeated YsqlDdlTxnVerifierState ysql_ddl_txn_verifier_state = 38;

  // YSQL transaction that is currently modifying this table state. The changes being performed by
  // it are detailed in 'ysql_ddl_txn_state' above.
  optional TransactionMetadataPB transaction = 29;

  repeated StatefulServiceKind hosted_stateful_services = 39;

  // Time when a full compaction was last requested by the user.
  optional fixed64 last_full_compaction_time = 41;
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tablets entries.
message SysTabletsEntryPB {
  reserved 15;

  enum State {
    UNKNOWN = 999;
    PREPARING = 0;
    CREATING = 1;
    RUNNING = 2;
    REPLACED = 3;
    DELETED = 4;
  }

  // DEPRECATED. Replaced by 'partition'.
  optional bytes OBSOLETE_start_key = 1;
  optional bytes OBSOLETE_end_key = 2;

  // Tablet partition.
  optional PartitionPB partition = 7;

  // The latest committed consensus configuration reported to the Master.
  optional consensus.ConsensusStatePB committed_consensus_state = 3;

  // Debug state for the tablet.
  optional State state = 4 [ default = UNKNOWN ];
  optional bytes state_msg = 5;

  // The table id for the tablet.
  required bytes table_id = 6;
  // Table ids for all the tables on this tablet.
  repeated bytes table_ids = 8;

  // True if the tablet is colocated.
  optional bool colocated = 9 [ default = false ];

  // Replaced by the map below.
  optional bytes DEPRECATED_backfilled_until = 10;

  // For tablets that are results of splitting we set this to split parent split_depth + 1.
  optional uint64 split_depth = 11;

  optional bytes split_parent_tablet_id = 13;

  // If the tablet is in the backfilling state, this is used to keep track
  // of how far along backfill has completed.
  // Key corresponds to the table_id for the index table. Value is encoded as
  // the DocKey for the next row to be backfilled.
  map<string, bytes> backfilled_until = 12;

  // Tablet IDs for the children of this tablet after splitting. It is possible for a tablet to
  // temporarily exist in this field but not be registered as part of the table or the catalog
  // manager's tablet map.
  repeated bytes split_tablet_ids = 14;

  // Time when tablet was hidden.
  optional fixed64 hide_hybrid_time = 16;

  // If tablet was hidden instead of deleting, here we keep list of schedule ids that prevented
  // actual deletion.
  repeated bytes retained_by_snapshot_schedules = 17;

  // Describes the persisted mapping scheme for colocated tablets. If set, the table_ids field of
  // this tablet is empty and child tables on this tablet have their parent_table_id field
  // filled. The table_id field of all tablets is filled with the parent table id. So the list of
  // tables hosted on this tablet is computed at load time by finding all child tables of the
  // parent table of this tablet.
  optional bool hosted_tables_mapped_by_parent_id = 18;
}

// The data part of a SysRowEntry in the sys.catalog table for a namespace.
message SysNamespaceEntryPB {
  enum State {
    UNKNOWN = 0;    // Unset or bad data. Unexpected state.
    PREPARING = 1;  // Creating. Transitive State. Possible Next States: [RUNNING, FAILED].
    FAILED = 2;     // Creation Failed. Permanent State.
    RUNNING = 3;    // Live. Permanent State. Possible Next States: [FAILED, DELETING].
    DELETING = 4;   // Delete Requested. Transitive State. Possible Next States: [DELETED].
    DELETED = 5;    // Delete Finished on TServers or Tombstone. Final State before erasure.
  }
  // Note: The id of the namespace is not stored here as it is already part of
  // SysRowEntry's id component.

  // Namespace name.
  optional bytes name = 1;

  // Namespace/Database type.
  optional YQLDatabase database_type = 2 [ default = YQL_DATABASE_CQL ];

  // For Postgres:
  optional uint32 next_pg_oid = 3; // Next oid to assign.

  // True if the namespace is colocated.
  optional bool colocated = 4 [ default = false ];

  // Optional: Namespace dependent upon transaction success (abort removes NS). Used by YSQL.
  optional TransactionMetadataPB transaction = 6;

  optional State state = 5 [ default = UNKNOWN ];
}

// The data part of a SysRowEntry in the sys.catalog table for a User Defined Type.
message SysUDTypeEntryPB {
  optional string namespace_id = 1;
  optional string name = 2;
  repeated string field_names = 3;
  repeated QLTypePB field_types = 4;
}

// This is used to mark servers in the load balancer that should be considered
// for immediate removal of load and also prevented from being assigned any
// new load.
message BlacklistPB {
  repeated HostPortPB hosts = 1;

  // Fields to track the number of replicas/leaders in current set of tablets which have a
  // blacklist server/leader. Client should not set this. Set by server side when persisting
  // the blacklist load.
  optional int32 initial_replica_load = 2;
  optional int32 initial_leader_load = 3;
}

message EncryptionInfoPB {
  optional bool encryption_enabled = 1;
  optional bytes universe_key_registry_encoded = 2;
  optional string key_path = 3;
  optional string latest_version_id = 4;
  optional bool key_in_memory = 5;
}

// The on-disk entry in the sys.catalog table for configuration information
// that are relevant to the entire cluster. This has a version entry that is
// used for ensuring that client read-modify-writes are valid.
message SysClusterConfigEntryPB {
  optional int32 version = 1;
  optional string cluster_uuid = 4;
  optional ReplicationInfoPB replication_info = 2;
  optional BlacklistPB server_blacklist = 3;
  optional BlacklistPB leader_blacklist = 7;
  optional EncryptionInfoPB encryption_info = 5;
  optional cdc.ConsumerRegistryPB consumer_registry = 6;
}

message SysXClusterConfigEntryPB {
  optional uint32 version = 1;
  optional xcluster.ProducerRegistryPB xcluster_producer_registry = 2;
}

// The data part of a SysRowEntry in the sys.catalog table for Redis Config.
message SysRedisConfigEntryPB {
  optional string key = 1;
  repeated bytes args = 2;
}

message ResourcePermissionsPB {
  optional string resource_name = 1;
  optional string canonical_resource = 11;
  optional string namespace_name = 12;
  optional ResourceType resource_type = 2;
  repeated PermissionType permissions = 13;
}

message SysRoleEntryPB {
  optional bytes role = 1;
  optional bool can_login = 2;
  optional bool is_superuser = 3;
  repeated bytes member_of = 4;
  optional bytes salted_hash = 5;
  repeated ResourcePermissionsPB resources = 7;
}

// Cluster security configuration.
message SysSecurityConfigEntryPB {
  // Roles configuration version. Every time a role gets created/deleted, or a permission gets
  // added/removed, we increase the version.
  optional uint64 roles_version = 1;
}

// Metadata about the YSQL catalog (current only version).
message SysYSQLCatalogConfigEntryPB {
  // YSQL catalog version. Every time the catalog tables are changed (i.e. by DDL statements)
  // this version gets incremented.
  optional uint64 version = 1;

  // This is true if the master ran initdb and it finished, succesfully or not.
  optional bool initdb_done = 2;

  // If this is set, initdb has failed.
  optional string initdb_error = 5;

  // true if transactional system catalogs have been enabled on this cluster. This means all
  // YSQL system catalog tables have been made transactional, both in their schema and in the tablet
  // metadata.
  optional bool transactional_sys_catalog_enabled = 6;
}

// Metadata about the current state of transaction tables.
message SysTransactionTablesConfigEntryPB {
  // Transaction status tables version. Every time a transaction table is added or has its placement
  // changed, this version gets incremented.
  optional uint64 version = 1;
}

// Various cluster configuration.
message SysConfigEntryPB {
  oneof config {
    SysSecurityConfigEntryPB security_config = 1;
    SysYSQLCatalogConfigEntryPB ysql_catalog_config = 2;
    SysTransactionTablesConfigEntryPB transaction_tables_config = 3;
  }
}

// The actual on disk abstract representation of a row in the sys catalog.
// This has to respect the fixed schema of the catalog. In case of changes to
// the schema, this proto must reflect them.
message SysRowEntry {
  // The type of entry we are storing. Since the data is serialized, we cannot
  // just store it with
  // the data, as we are not able to read into the appropriate type.
  optional SysRowEntryType type = 1;

  // The optional ID of the data that we are storing. This can be useful to only
  // read information
  // related to a single item, in the case of tables or tablets, for example.
  // This is optional.
  optional string id = 2;

  // This is the serialized format of the proto we store. This used to be of the "string" type, but
  // was giving warnings due to non-UTF8 data. This is safe, because "bytes" and "string" are
  // encoded the same way in Protobuf.
  // https://groups.google.com/forum/#!msg/protobuf/au6eQBkRT5s/Bhpctql7Q5sJ
  optional bytes data = 3;
}

message SysRowEntries {
  repeated SysRowEntry entries = 1;
}

message DdlLogEntryPB {
  optional TableType table_type = 1;
  optional string namespace_name = 2;
  optional string namespace_id = 3;
  optional string table_name = 4;
  optional string table_id = 5;
  optional string action = 6;
  optional fixed64 time = 7;
}

// Options for CDC stream. This will include details such as:
// Stream sink: YB Universe / Kafka / Elastic Search.
// Log retention time: Amount of time to retain logs for CDC.
// Sink details: For example, Kafka cluster IP, port.
message CDCStreamOptionsPB {
  optional string key = 1;
  optional bytes value = 2;
}

// The data part of a SysRowEntry in the sys.catalog table for a CDC stream.
message SysCDCStreamEntryPB {
  enum State {
    // Used to mark a stream that has been bootstrapped, but hasn't started streaming yet.
    INITIATED = 3;
    ACTIVE = 0;
    DELETING = 1;
    // Currently DELETED is not being used because we delete streams entries from sys catalog.
    DELETED = 2;
    // Used to handle the stream metadata cleanup as part of drop table.
    DELETING_METADATA = 4;
  }
  repeated string table_id = 1;
  repeated CDCStreamOptionsPB options = 2;
  optional State state = 3 [default = ACTIVE];
  optional string namespace_id = 4;
}

// The on-disk entry in the sys.catalog table ("metadata" column) for snapshots entries.
message SysSnapshotEntryPB {
  enum State {
    UNKNOWN = 0;
    CREATING = 1;
    COMPLETE = 2;
    DELETING = 3;
    DELETED = 4;
    FAILED = 5;
    CANCELLED = 6;
    RESTORING = 7;
    RESTORED = 8;
  }

  // Note: The id of the snapshot is not stored here as it is already part of
  // SysRowEntry's id component.

  optional State state = 1 [ default = UNKNOWN ];

  message TabletSnapshotPB {
    optional bytes id = 1;
    optional State state = 2;
  }

  repeated TabletSnapshotPB tablet_snapshots = 2;

  // Stored info about snapshot (1) namespaces (2) tables (3) tablets.
  repeated SysRowEntry entries = 3;

  optional fixed64 snapshot_hybrid_time = 4;

  optional int64 version = 5;

  optional bytes schedule_id = 6;

  optional fixed64 previous_snapshot_hybrid_time = 7;
}

message SchemaVersionMappingPB {
  required uint32 producer_schema_version = 1;
  required uint32 consumer_schema_version = 2;
}

message ColocatedSchemaVersionMappingPB {
  required uint32 colocation_id = 1;
  required SchemaVersionMappingPB schema_version_mapping = 2;
}

message SchemaVersionMappingEntryPB {
  optional SchemaVersionMappingPB schema_version_mapping = 1;
  repeated ColocatedSchemaVersionMappingPB colocated_schema_versions = 2;
}

// The data part of a SysRowEntry in the sys.catalog table for a universe replication record.
message SysUniverseReplicationEntryPB {
  enum State {
    // Setting up replication.
    INITIALIZING = 0;
    // Validated table schemas.
    VALIDATED = 1;
    // Active.
    ACTIVE = 2;
    // Failed.
    // Setting up universe replication consists of a sequence of steps like validating schemas,
    // creating CDC streams, starting subscribers. If any of these fail, we set the universe
    // replication state to FAILED.
    FAILED = 3;
    // Disabled.
    DISABLED = 6;
    // Deleted.
    DELETED = 4;
    // Error while cleaning up state of deleted entry. This indicates that universe replication has
    // been deleted but there is still some uncleaned up state - for example, there may be left over
    // CDC streams.
    DELETED_ERROR = 5;
    // Unfinished Delete
    DELETING = 7;
  }

  optional string producer_id = 1;
  repeated HostPortPB producer_master_addresses = 2;

  // producer table IDs.
  repeated string tables = 3;

  optional State state = 4 [default = INITIALIZING];

  // producer table ID -> consumer table ID map.
  map<string, string> validated_tables = 5;

  // producer table ID -> producer CDC stream ID map.
  map<string, string> table_streams = 6;

  // Namespace-level replication setup.
  optional bool is_ns_replication = 7 [default = false];
  optional NamespaceIdentifierPB producer_namespace = 8;
  optional NamespaceIdentifierPB consumer_namespace = 9;

  // Mapping from Producer Table ID to Producer->Consumer schema version mappings
  map<string, SchemaVersionMappingEntryPB> schema_version_mappings = 10;
}

message XClusterSafeTimePB {
  // Map[Local NamespaceId]: xCluster safe read HybridTime
  map<string, fixed64> safe_time_map = 1;
}
